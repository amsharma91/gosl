// Copyright 2012 Dorival de Moraes Pedroso. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package tsr

import (
	"math"
	"testing"

	"github.com/cpmech/gosl/la"
	"github.com/cpmech/gosl/num"
	"github.com/cpmech/gosl/utl"
)

func Test_geninvs01(tst *testing.T) {

	prevTs := utl.Tsilent
	defer func() {
		utl.Tsilent = prevTs
		if err := recover(); err != nil {
			tst.Error("[1;31mSome error has happened:[0m\n", err)
		}
	}()

	//utl.Tsilent = false
	utl.TTitle("geninvs01")

	tol := 1e-15
	b := 0.5
	dtol := 1e-7
	dver := true
	dtol2 := 1e-6

	nd := test_nd
	for idxA := 0; idxA < len(test_nd)-3; idxA++ {
		//for idxA := 0; idxA < 1; idxA++ {

		// tensor and eigenvalues
		A := test_AA[idxA]
		a := M_Alloc2(nd[idxA])
		Ten2Man(a, A)
		Î» := make([]float64, 3)
		M_EigenValsNum(Î», a)

		// shifted eigenvalues
		Ïƒc := 0.0
		for j := 0; j < 3; j++ {
			if Î»[j] >= Ïƒc {
				Ïƒc = Î»[j] * 1.01
			}
		}
		Ïƒ := make([]float64, 3)
		err := ShiftedEigenvs(Ïƒ, Î», Ïƒc, tol)
		if err != nil {
			utl.Panic("%v\n", err)
		}

		// SMP director
		N := make([]float64, 3)
		n := make([]float64, 3)
		m := SmpUnitDirector(n, Ïƒ, b)
		SmpDirector(N, Ïƒ, b)

		// output
		utl.PfYel("\n\ntst # %d ###################################################################################\n", idxA)
		utl.Pfblue2("Ïƒ  = %v\n", Ïƒ)
		utl.Pforan("Î» = %v\n", Î»)
		utl.Pforan("N = %v\n", N)
		utl.Pforan("m = %v\n", m)
		utl.Pfpink("n = %v\n", n)
		utl.CheckVector(tst, "Î»", 1e-12, Î», test_Î»[idxA])
		utl.CheckScalar(tst, "norm(n)==1", 1e-15, la.VecNorm(n), 1)
		utl.CheckScalar(tst, "m=norm(N)", 1e-14, m, la.VecNorm(N))

		// dN/dÏƒ
		var tmp float64
		N_tmp := make([]float64, 3)
		dNdÏƒ := la.MatAlloc(3, 3)
		SmpDirectorDeriv1(dNdÏƒ, Ïƒ, b)
		utl.Pfpink("\ndNdÏƒ = %v\n", dNdÏƒ)
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				dnum, _ := num.DerivCentral(func(x float64, args ...interface{}) (res float64) {
					tmp, Ïƒ[j] = Ïƒ[j], x
					SmpDirector(N_tmp, Ïƒ, b)
					Ïƒ[j] = tmp
					return N_tmp[i]
				}, Ïƒ[j], 1e-6)
				utl.CheckAnaNum(tst, utl.Sf("dN/dÏƒ[%d][%d]", i, j), dtol, dNdÏƒ[i][j], dnum, dver)
			}
		}

		// dm/dÏƒ
		n_tmp := make([]float64, 3)
		dmdÏƒ := make([]float64, 3)
		mm := SmpNormDirectorDeriv1(dmdÏƒ, Ïƒ, b)
		utl.Pfpink("\ndmdÏƒ = %v\n", dmdÏƒ)
		utl.CheckScalar(tst, "m", 1e-17, m, mm)
		dtol_tmp := dtol
		if idxA == 5 {
			dtol = 1e-6
		}
		for j := 0; j < 3; j++ {
			dnum, _ := num.DerivCentral(func(x float64, args ...interface{}) (res float64) {
				tmp, Ïƒ[j] = Ïƒ[j], x
				m := SmpUnitDirector(n_tmp, Ïƒ, b)
				Ïƒ[j] = tmp
				return m
			}, Ïƒ[j], 1e-6)
			utl.CheckAnaNum(tst, utl.Sf("dm/dÏƒ[%d]", j), dtol, dmdÏƒ[j], dnum, dver)
		}
		dtol = dtol_tmp

		// dn/dÏƒ
		dndÏƒ := la.MatAlloc(3, 3)
		SmpUnitDirectorDeriv1(dndÏƒ, Ïƒ, n, b, m, dmdÏƒ)
		utl.Pfpink("\ndndÏƒ = %v\n", dndÏƒ)
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				dnum, _ := num.DerivCentral(func(x float64, args ...interface{}) (res float64) {
					tmp, Ïƒ[j] = Ïƒ[j], x
					SmpUnitDirector(n_tmp, Ïƒ, b)
					Ïƒ[j] = tmp
					return n_tmp[i]
				}, Ïƒ[j], 1e-6)
				utl.CheckAnaNum(tst, utl.Sf("dn/dÏƒ[%d][%d]", i, j), dtol, dndÏƒ[i][j], dnum, dver)
			}
		}

		// dÂ²m/dÏƒdÏƒ
		dmdÏƒ_tmp := make([]float64, 3)
		d2mdÏƒdÏƒ := la.MatAlloc(3, 3)
		SmpNormDirectorDeriv2(d2mdÏƒdÏƒ, Ïƒ, b, m, dmdÏƒ)
		utl.Pfpink("\nd2mdÏƒdÏƒ = %v\n", d2mdÏƒdÏƒ)
		tol_tmp := dtol2
		if idxA == 5 {
			dtol2 = 1e-3
		}
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				dnum, _ := num.DerivCentral(func(x float64, args ...interface{}) (res float64) {
					tmp, Ïƒ[j] = Ïƒ[j], x
					SmpNormDirectorDeriv1(dmdÏƒ_tmp, Ïƒ, b)
					Ïƒ[j] = tmp
					return dmdÏƒ_tmp[i]
				}, Ïƒ[j], 1e-6)
				utl.CheckAnaNum(tst, utl.Sf("d2m/dÏƒ[%d]dÏƒ[%d]", i, j), dtol2, d2mdÏƒdÏƒ[i][j], dnum, dver)
			}
		}
		dtol2 = tol_tmp

		// dÂ²N/dÏƒdÏƒ
		utl.Pfpink("\ndÂ²N/dÏƒdÏƒ\n")
		dNdÏƒ_tmp := la.MatAlloc(3, 3)
		tol_tmp = dtol2
		if idxA == 5 {
			dtol2 = 1e-4
		}
		if idxA == 7 {
			dtol2 = 1e-5
		}
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				for k := 0; k < 3; k++ {
					dnum, _ := num.DerivCentral(func(x float64, args ...interface{}) (res float64) {
						tmp, Ïƒ[k] = Ïƒ[k], x
						SmpDirectorDeriv1(dNdÏƒ_tmp, Ïƒ, b)
						Ïƒ[k] = tmp
						return dNdÏƒ_tmp[i][j]
					}, Ïƒ[k], 1e-6)
					dana := SmpDirectorDeriv2(i, j, k, Ïƒ, b)
					utl.CheckAnaNum(tst, utl.Sf("dÂ²N[%d]/dÏƒ[%d]dÏƒ[%d]", i, j, k), dtol2, dana, dnum, dver)
				}
			}
		}
		dtol2 = tol_tmp

		// dÂ²n/dÏƒdÏƒ
		utl.Pfpink("\ndÂ²n/dÏƒdÏƒ\n")
		dndÏƒ_tmp := la.MatAlloc(3, 3)
		d2ndÏƒdÏƒ := utl.Deep3alloc(3, 3, 3)
		SmpUnitDirectorDeriv2(d2ndÏƒdÏƒ, Ïƒ, n, dmdÏƒ, b, m, d2mdÏƒdÏƒ, dndÏƒ)
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				for k := 0; k < 3; k++ {
					dnum, _ := num.DerivCentral(func(x float64, args ...interface{}) (res float64) {
						tmp, Ïƒ[k] = Ïƒ[k], x
						SmpUnitDirector(n_tmp, Ïƒ, b)
						m_tmp := SmpNormDirectorDeriv1(dmdÏƒ_tmp, Ïƒ, b)
						SmpUnitDirectorDeriv1(dndÏƒ_tmp, Ïƒ, n_tmp, b, m_tmp, dmdÏƒ_tmp)
						Ïƒ[k] = tmp
						return dndÏƒ_tmp[i][j]
					}, Ïƒ[k], 1e-6)
					utl.CheckAnaNum(tst, utl.Sf("dÂ²n[%d]/dÏƒ[%d]dÏƒ[%d]", i, j, k), dtol2, d2ndÏƒdÏƒ[i][j][k], dnum, dver)
				}
			}
		}

		// SMP derivs
		utl.Pfpink("\nSMP derivs\n")
		d2mdÏƒdÏƒ_ := la.MatAlloc(3, 3)
		dndÏƒ_ := la.MatAlloc(3, 3)
		dmdÏƒ_ := make([]float64, 3)
		n_ := make([]float64, 3)
		m_ := SmpDerivs(d2mdÏƒdÏƒ_, dndÏƒ_, dmdÏƒ_, n_, Ïƒ, b)
		utl.CheckScalar(tst, "m_", 1e-14, m_, m)
		utl.CheckVector(tst, "n_", 1e-15, n_, n)
		utl.CheckVector(tst, "dmdÏƒ_", 1e-15, dmdÏƒ_, dmdÏƒ)
		utl.CheckMatrix(tst, "dndÏƒ_", 1e-13, dndÏƒ_, dndÏƒ)
		utl.CheckMatrix(tst, "d2mdÏƒdÏƒ_", 1e-13, d2mdÏƒdÏƒ_, d2mdÏƒdÏƒ)
	}
}

func Test_geninvs02(tst *testing.T) {

	prevTs := utl.Tsilent
	defer func() {
		utl.Tsilent = prevTs
		if err := recover(); err != nil {
			tst.Error("[1;31mSome error has happened:[0m\n", err)
		}
	}()

	//utl.Tsilent = false
	utl.TTitle("geninvs02")

	b := 0.5
	tol := 1e-10
	dtol := 1e-7
	dtol2 := 1e-7
	dver := true

	nd := test_nd
	for idxA := 0; idxA < len(test_nd)-3; idxA++ {
		//for idxA := 0; idxA < 1; idxA++ {

		// tensor and eigenvalues
		A := test_AA[idxA]
		a := M_Alloc2(nd[idxA])
		Ten2Man(a, A)
		Î» := make([]float64, 3)
		M_EigenValsNum(Î», a)
		Ïƒc := 0.0
		cf := 1.1 // 1.01
		for j := 0; j < 3; j++ {
			if Î»[j] >= Ïƒc {
				Ïƒc = Î»[j] * cf
			}
		}

		// shifted eigenvalues
		Ïƒ := make([]float64, 3)
		err := ShiftedEigenvs(Ïƒ, Î», Ïƒc, tol)
		if err != nil {
			utl.Panic("%v\n", err)
		}

		// SMP derivs and SMP director
		d2mdÏƒdÏƒ := la.MatAlloc(3, 3)
		dndÏƒ := la.MatAlloc(3, 3)
		dmdÏƒ := make([]float64, 3)
		n := make([]float64, 3)
		m := SmpDerivs(d2mdÏƒdÏƒ, dndÏƒ, dmdÏƒ, n, Ïƒ, b)

		// SMP invariants
		p, q, err := GenInvs(Ïƒ, n, 1)
		if err != nil {
			utl.Panic("SmpInvs failed:\n%v", err)
		}

		// output
		utl.PfYel("\n\ntst # %d ###################################################################################\n", idxA)
		utl.Pfblue2("Ïƒ = %v\n", Ïƒ)
		utl.Pforan("n = %v\n", n)
		utl.Pforan("p = %v\n", p)
		utl.Pforan("q = %v\n", q)

		// check invariants
		tvec := make([]float64, 3)
		GenTvec(tvec, Ïƒ, n)
		proj := make([]float64, 3) // projection of tvec along n
		tdn := la.VecDot(tvec, n)  // tvec dot n
		for i := 0; i < 3; i++ {
			proj[i] = tdn * n[i]
		}
		norm_proj := la.VecNorm(proj)
		norm_tvec := la.VecNorm(tvec)
		q_ := math.Sqrt(norm_tvec*norm_tvec - norm_proj*norm_proj)
		utl.Pforan("proj = %v\n", proj)
		utl.Pforan("norm(proj) = %v == p\n", norm_proj)
		utl.CheckScalar(tst, "p", 1e-14, p, norm_proj)
		utl.CheckScalar(tst, "q", 1e-13, q, q_)

		// dt/dÏƒ
		var tmp float64
		n_tmp := make([]float64, 3)
		tvec_tmp := make([]float64, 3)
		dtdÏƒ := la.MatAlloc(3, 3)
		GenTvecDeriv1(dtdÏƒ, Ïƒ, n, dndÏƒ)
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				dnum, _ := num.DerivCentral(func(x float64, args ...interface{}) (res float64) {
					tmp, Ïƒ[j] = Ïƒ[j], x
					SmpUnitDirector(n_tmp, Ïƒ, b)
					GenTvec(tvec_tmp, Ïƒ, n_tmp)
					Ïƒ[j] = tmp
					return tvec_tmp[i]
				}, Ïƒ[j], 1e-6)
				utl.CheckAnaNum(tst, utl.Sf("dt/dÏƒ[%d][%d]", i, j), dtol, dtdÏƒ[i][j], dnum, dver)
			}
		}

		// dÂ²t/dÏƒdÏƒ
		utl.Pfpink("\ndÂ²t/dÏƒdÏƒ\n")
		d2mdÏƒdÏƒ_tmp := la.MatAlloc(3, 3)
		dndÏƒ_tmp := la.MatAlloc(3, 3)
		dmdÏƒ_tmp := make([]float64, 3)
		dtdÏƒ_tmp := la.MatAlloc(3, 3)
		d2ndÏƒdÏƒ := utl.Deep3alloc(3, 3, 3)
		SmpUnitDirectorDeriv2(d2ndÏƒdÏƒ, Ïƒ, n, dmdÏƒ, b, m, d2mdÏƒdÏƒ, dndÏƒ)
		dtol2_tmp := dtol2
		if idxA == 5 {
			dtol2 = 1e-6
		}
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				for k := 0; k < 3; k++ {
					dnum, _ := num.DerivCentral(func(x float64, args ...interface{}) (res float64) {
						tmp, Ïƒ[k] = Ïƒ[k], x
						SmpDerivs(d2mdÏƒdÏƒ_tmp, dndÏƒ_tmp, dmdÏƒ_tmp, n_tmp, Ïƒ, b)
						GenTvecDeriv1(dtdÏƒ_tmp, Ïƒ, n_tmp, dndÏƒ_tmp)
						Ïƒ[k] = tmp
						return dtdÏƒ_tmp[i][j]
					}, Ïƒ[k], 1e-6)
					dana := GenTvecDeriv2(i, j, k, Ïƒ, dndÏƒ, d2ndÏƒdÏƒ[i][j][k])
					utl.CheckAnaNum(tst, utl.Sf("dÂ²t[%d]/dÏƒ[%d]dÏƒ[%d]", i, j, k), dtol2, dana, dnum, dver)
				}
			}
		}
		dtol2 = dtol2_tmp

		// first order derivatives
		dpdÏƒ := make([]float64, 3)
		dqdÏƒ := make([]float64, 3)
		p_, q_, err := GenInvsDeriv1(dpdÏƒ, dqdÏƒ, Ïƒ, n, dndÏƒ, 1)
		if err != nil {
			utl.Panic("%v", err)
		}
		utl.CheckScalar(tst, "p", 1e-17, p, p_)
		utl.CheckScalar(tst, "q", 1e-17, q, q_)
		var ptmp, qtmp float64
		utl.Pfpink("\ndp/dÏƒ\n")
		for j := 0; j < 3; j++ {
			dnum, _ := num.DerivCentral(func(x float64, args ...interface{}) (res float64) {
				tmp, Ïƒ[j] = Ïƒ[j], x
				SmpUnitDirector(n_tmp, Ïƒ, b)
				ptmp, _, err = GenInvs(Ïƒ, n_tmp, 1)
				if err != nil {
					utl.Panic("DerivCentral: SmpInvs failed:\n%v", err)
				}
				if Ïƒ[0] < 1e-14 || Ïƒ[1] < 1e-14 || Ïƒ[2] < 1e-14 {
					utl.Panic("dp/dÏƒ failed: Ïƒ=%v must be all greater than %v", Ïƒ, 1e-14)
				}
				Ïƒ[j] = tmp
				return ptmp
			}, Ïƒ[j], 1e-6)
			utl.CheckAnaNum(tst, utl.Sf("dp/dÏƒ[%d]", j), dtol, dpdÏƒ[j], dnum, dver)
		}
		utl.Pfpink("\ndq/dÏƒ\n")
		for j := 0; j < 3; j++ {
			dnum, _ := num.DerivCentral(func(x float64, args ...interface{}) (res float64) {
				tmp, Ïƒ[j] = Ïƒ[j], x
				SmpUnitDirector(n_tmp, Ïƒ, b)
				_, qtmp, err = GenInvs(Ïƒ, n_tmp, 1)
				if err != nil {
					utl.Panic("DerivCentral: SmpInvs failed:\n%v", err)
				}
				if Ïƒ[0] < 1e-14 || Ïƒ[1] < 1e-14 || Ïƒ[2] < 1e-14 {
					utl.Panic("dq/dÏƒ failed: Ïƒ=%v must be all greater than %v", Ïƒ, 1e-14)
				}
				Ïƒ[j] = tmp
				return qtmp
			}, Ïƒ[j], 1e-6)
			utl.CheckAnaNum(tst, utl.Sf("dq/dÏƒ[%d]", j), dtol, dqdÏƒ[j], dnum, dver)
		}

		// second order derivatives
		dpdÏƒ_tmp := make([]float64, 3)
		dqdÏƒ_tmp := make([]float64, 3)
		d2pdÏƒdÏƒ := la.MatAlloc(3, 3)
		d2qdÏƒdÏƒ := la.MatAlloc(3, 3)
		GenInvsDeriv2(d2pdÏƒdÏƒ, d2qdÏƒdÏƒ, Ïƒ, n, dpdÏƒ, dqdÏƒ, p, q, dndÏƒ, d2ndÏƒdÏƒ, 1)
		utl.Pfpink("\ndÂ²p/dÏƒdÏƒ\n")
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				dnum, _ := num.DerivCentral(func(x float64, args ...interface{}) (res float64) {
					tmp, Ïƒ[j] = Ïƒ[j], x
					SmpDerivs(d2mdÏƒdÏƒ_tmp, dndÏƒ_tmp, dmdÏƒ_tmp, n_tmp, Ïƒ, b)
					GenInvsDeriv1(dpdÏƒ_tmp, dqdÏƒ_tmp, Ïƒ, n_tmp, dndÏƒ_tmp, 1)
					if Ïƒ[0] < 1e-14 || Ïƒ[1] < 1e-14 || Ïƒ[2] < 1e-14 {
						utl.Panic("dÂ²p/dÏƒdÏƒdp/dÏƒ failed: Ïƒ=%v must be all greater than %v", Ïƒ, 1e-14)
					}
					Ïƒ[j] = tmp
					return dpdÏƒ_tmp[i]
				}, Ïƒ[j], 1e-6)
				utl.CheckAnaNum(tst, utl.Sf("dÂ²p/dÏƒ[%d][%d]", i, j), dtol2, d2pdÏƒdÏƒ[i][j], dnum, dver)
			}
		}
		utl.Pfpink("\ndÂ²q/dÏƒdÏƒ\n")
		for i := 0; i < 3; i++ {
			for j := 0; j < 3; j++ {
				//dnum, _ := num.DerivForward(func(x float64, args ...interface{}) (res float64) {
				//dnum, _ := num.DerivBackward(func(x float64, args ...interface{}) (res float64) {
				dnum, _ := num.DerivCentral(func(x float64, args ...interface{}) (res float64) {
					tmp, Ïƒ[j] = Ïƒ[j], x
					SmpDerivs(d2mdÏƒdÏƒ_tmp, dndÏƒ_tmp, dmdÏƒ_tmp, n_tmp, Ïƒ, b)
					GenInvsDeriv1(dpdÏƒ_tmp, dqdÏƒ_tmp, Ïƒ, n_tmp, dndÏƒ_tmp, 1)
					if Ïƒ[0] < 1e-14 || Ïƒ[1] < 1e-14 || Ïƒ[2] < 1e-14 {
						utl.Panic("dÂ²q/dÏƒdÏƒdp/dÏƒ failed: Ïƒ=%v must be all greater than %v", Ïƒ, 1e-14)
					}
					Ïƒ[j] = tmp
					return dqdÏƒ_tmp[i]
				}, Ïƒ[j], 1e-6)
				utl.CheckAnaNum(tst, utl.Sf("dÂ²q/dÏƒ[%d][%d]", i, j), dtol2, d2qdÏƒdÏƒ[i][j], dnum, dver)
			}
		}
	}
}
