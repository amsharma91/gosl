// Copyright 2015 Dorival Pedroso and Raul Durand. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package la

import (
	"math"
	"testing"
	"time"

	"github.com/cpmech/gosl/chk"
	"github.com/cpmech/gosl/io"
)

/// Small Matrix Inversion ///////////////////////////////////////////////////////////////////////////

func Test_matinvSmall01(tst *testing.T) {

	//verbose()
	chk.PrintTitle("matinvSmall01")

	noise := 0.0
	tol := 1.0e-16

	// 1 x 1 matrix
	res := MatAlloc(1, 1)
	det, err := MatInv(res, [][]float64{{2.0}}, tol)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	chk.Scalar(tst, "1 x 1 matrix: det ", tol, det, 2.0)
	chk.Matrix(tst, "1 x 1 matrix: ", tol, res, [][]float64{{0.5}})

	// matrix: inverse
	A := [][]float64{{1.0, 2.0}, {3.0, 2.0}}
	Aicorr := [][]float64{{-0.5, 0.5}, {0.75, -0.25 + noise}}
	Ai := MatAlloc(2, 2)
	detA, err := MatInv(Ai, A, tol)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	chk.Scalar(tst, "matrix: inv (det) ", tol, detA, -4.0+noise)
	chk.Matrix(tst, "matrix: inv (A)   ", tol, Ai, Aicorr)

	// using MatInvG
	Ai_ := MatAlloc(2, 2)
	err = MatInvG(Ai_, A, tol)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	chk.Matrix(tst, "matrix: inv with MatInvG", tol, Ai_, Aicorr)

	// another test
	B := [][]float64{{9.0, 3.0, 5.0}, {-6.0, -9.0, 7.0}, {-1.0, -8.0, 1.0}}
	Bicorr := [][]float64{
		{7.642276422764227e-02, -6.991869918699187e-02, 1.073170731707317e-01},
		{-1.626016260162601e-03, 2.276422764227642e-02, -1.512195121951219e-01},
		{6.341463414634146e-02, 1.121951219512195e-01, -1.024390243902439e-01 + noise},
	}
	Bi := MatAlloc(3, 3)
	detB, err := MatInv(Bi, B, tol)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	chk.Scalar(tst, "matrix: det ", tol, detB, 615.0+noise)
	chk.Matrix(tst, "matrix: inv ", tol, Bi, Bicorr)

	// using MatInvG
	Bi_ := MatAlloc(3, 3)
	err = MatInvG(Bi_, B, tol)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	chk.Matrix(tst, "matrix: inv with MatInvG", tol, Bi_, Bicorr)
}

/// General Matrix Inversion /////////////////////////////////////////////////////////////////////////

func RunInvCheck(tst *testing.T, key string, M, CorrectInvM [][]float64, checkI bool, Tol, TolI float64) {
	m, n := len(M), len(M[0])
	Mi := MatAlloc(n, m)
	t0 := time.Now()
	err := MatInvG(Mi, M, 1e-13)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	io.Pfpink("Lapack: time elapsed = %v\n", time.Now().Sub(t0))
	MMi := MatAlloc(m, m)
	MMiM := MatAlloc(m, n)
	MatMul(MMi, 1, M, Mi)   // MMi = M * Mi
	MatMul(MMiM, 1, MMi, M) // MMiM = M * Mi * M == M
	chk.Matrix(tst, io.Sf("%s => Mi - CorrectInvM ", key), Tol, Mi, CorrectInvM)
	chk.Matrix(tst, io.Sf("%s => M*Mi*M = M       ", key), Tol, MMiM, M)
	if checkI {
		I := MatAlloc(m, m)
		MatSetDiag(I, 1)
		chk.Matrix(tst, io.Sf("%s => M*Mi = I         ", key), TolI, MMi, I)
	}
}

func RunSvdCheck(tst *testing.T, key string, A, CorU [][]float64, CorS []float64, CorVt [][]float64, Tol float64) {
	m, n := len(A), len(A[0])
	ns := imin(m, n)
	U, S, Vt := MatAlloc(m, m), make([]float64, ns), MatAlloc(n, n)
	err := MatSvd(U, S, Vt, A, 1e-14)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	chk.Matrix(tst, io.Sf("%s => U", key), Tol, U, CorU)
	chk.Vector(tst, io.Sf("%s => S", key), Tol, S, CorS)
	chk.Matrix(tst, io.Sf("%s => Vt", key), Tol, Vt, CorVt)
	usvt := MatAlloc(m, n)
	for i := 0; i < m; i++ {
		for j := 0; j < n; j++ {
			for k := 0; k < ns; k++ {
				usvt[i][j] += U[i][k] * S[k] * Vt[k][j]
			}
		}
	}
	chk.Matrix(tst, io.Sf("%s => U*S*Vt", key), Tol, A, usvt)
}

func Test_matinv01(tst *testing.T) {

	//verbose()
	chk.PrintTitle("matinv01")

	io.Pf("--- A --(2 x 2)-----------------------------------\n")
	A := [][]float64{
		{1, 2},
		{3, 4},
	}
	corInvA := [][]float64{
		{-2.0, 1.0},
		{1.5, -0.5},
	}
	corUA := [][]float64{
		{-4.0455358483375697e-01, -9.1451429567730447e-01},
		{-9.1451429567730458e-01, 4.0455358483375692e-01},
	}
	corSA := []float64{5.4649857042190426e+00, 3.6596619062625751e-01}
	corVtA := [][]float64{
		{-5.7604843676632078e-01, -8.1741556047036323e-01},
		{8.1741556047036323e-01, -5.7604843676632078e-01},
	}
	Aa := [][]float64{
		{1.0, 2.0},
		{3.0, 2.0},
	}
	corInvAa := [][]float64{
		{-0.5, 0.5},
		{0.75, -0.25},
	}
	checkI := true
	RunInvCheck(tst, "A", A, corInvA, checkI, 1e-15, 1e-15)
	RunInvCheck(tst, "Aa", Aa, corInvAa, checkI, 1e-15, 1e-15)
	RunSvdCheck(tst, "A", A, corUA, corSA, corVtA, 1e-14)

	io.Pf("\n--- B --(3 x 3)-----------------------------------\n")
	B := [][]float64{
		{10, 1, 2},
		{3, 20, 4},
		{5, 6, 30},
	}
	corInvB := [][]float64{
		{1.0423452768729642e-01, -3.2573289902280136e-03, -6.5146579804560255e-03},
		{-1.2667390517553386e-02, 5.2479189287006879e-02, -6.1527325370973572e-03},
		{-1.4838943177705389e-02, -9.9529496923633724e-03, 3.5649656170828804e-02},
	}
	corUB := [][]float64{
		{1.3141755556410686e-01, 4.4742200224954710e-02, -9.9031689958749303e-01},
		{3.6969554284917222e-01, 9.2470200356647714e-01, 9.0837273173509273e-02},
		{9.1981228067851462e-01, -3.7805335618027919e-01, 1.0498108493350734e-01},
	}
	corSB := []float64{3.2864331638810626e+01, 1.7987569607075308e+01, 9.3478898990569999e+00}
	corVtB := [][]float64{
		{2.1367614180500336e-01, 3.9691061543495060e-01, 8.9263904786782489e-01},
		{7.4010067014497569e-02, 9.0453921735335097e-01, -4.1991822328912670e-01},
		{-9.7409702617544103e-01, 1.5579078157848747e-01, 1.6390306882827524e-01},
	}
	Ba := [][]float64{
		{9.0, 3.0, 5.0},
		{-6.0, -9.0, 7.0},
		{-1.0, -8.0, 1.0},
	}
	corInvBa := [][]float64{
		{7.642276422764227e-02, -6.991869918699187e-02, 1.073170731707317e-01},
		{-1.626016260162601e-03, 2.276422764227642e-02, -1.512195121951219e-01},
		{6.341463414634146e-02, 1.121951219512195e-01, -1.024390243902439e-01},
	}
	RunInvCheck(tst, "B", B, corInvB, checkI, 1e-14, 1e-15)
	RunInvCheck(tst, "Ba", Ba, corInvBa, checkI, 1e-14, 1e-14)
	RunSvdCheck(tst, "B", B, corUB, corSB, corVtB, 1e-13)

	io.Pf("\n--- C --(5 x 5)-----------------------------------\n")
	C := [][]float64{
		{12, 28, 22, 20, 8},
		{0, 3, 5, 17, 28},
		{56, 0, 23, 1, 0},
		{12, 29, 27, 10, 1},
		{9, 4, 13, 8, 22},
	}
	corInvC := [][]float64{
		{6.9128803717996279e-01, -7.4226114383340802e-01, -9.8756287260606410e-02, -6.9062496266472417e-01, 7.2471057693456553e-01},
		{1.5936129795342968e+00, -1.7482347881148397e+00, -2.8304321334273236e-01, -1.5600769405383470e+00, 1.7164430532490673e+00},
		{-1.6345384165063759e+00, 1.7495848317224429e+00, 2.7469205863729274e-01, 1.6325730875377857e+00, -1.7065745928961444e+00},
		{-1.1177465024312745e+00, 1.3261729250546601e+00, 2.1243473793622566e-01, 1.1258168958554866e+00, -1.3325766717243535e+00},
		{7.9976941733073770e-01, -8.9457712572131853e-01, -1.4770432850264653e-01, -8.0791149448632715e-01, 9.2990525800169743e-01},
	}
	corUC := [][]float64{
		{-4.9131480299834873e-01, -3.9682713933839858e-01, 2.6940884231597306e-01, 5.5024083870837626e-01, 4.7517563167598015e-01},
		{-1.8436234721034561e-01, -4.5587438252398499e-01, -6.3940295404484160e-01, 2.7258142302445876e-01, -5.2445429016279244e-01},
		{-6.4666260791872432e-01, 7.1959191011975421e-01, -2.0909148108726730e-01, 1.1570356718901351e-01, -8.3116734093853104e-02},
		{-4.7937866776415455e-01, -2.6140673166893563e-01, 5.1576653173706322e-01, -4.6093491312241469e-01, -4.7263781496573321e-01},
		{-2.7684626365223813e-01, -2.2036508882136277e-01, -4.5699931653926035e-01, -6.3014766336473327e-01, 5.1851800447926977e-01},
	}
	corSC := []float64{7.6986806318205680e+01, 4.6904429440544916e+01, 3.2931871778592146e+01, 8.1528007049378086e+00, 1.7266616332203916e-01}
	corVtC := [][]float64{
		{-6.5404770601013151e-01, -3.8083496832132990e-01, -5.6043632545196509e-01, -2.6778192710204507e-01, -2.0344603657478880e-01},
		{6.4844738712320205e-01, -4.4646185600181121e-01, -9.3417253067825071e-02, -4.1240888414037769e-01, -4.4875374803990237e-01},
		{-1.9434098201682845e-01, 5.6949301281812137e-01, 1.7932721763630147e-01, -1.2720485785435223e-01, -7.6783459430605894e-01},
		{2.3056394573648911e-01, 4.1309070476231217e-02, -5.5291118097154834e-01, 7.4868432524463224e-01, -2.8088224349796215e-01},
		{2.4659568940095572e-01, 5.7411480305496243e-01, -5.8250778270734838e-01, -4.2603105176835093e-01, 2.9793453122548685e-01},
	}
	RunInvCheck(tst, "C", C, corInvC, checkI, 1e-12, 1e-12)
	RunSvdCheck(tst, "C", C, corUC, corSC, corVtC, 1e-13)

	io.Pf("\n--- F --(8 x 8)-----------------------------------\n")
	F := [][]float64{
		{1.01, 2.01, 3.01, 4.01, 5.01, 6.01, 7.01, 8.01},
		{1.02, 2.02, 3.02, 4.02, 5.02, 6.02, 7.02, 8.02},
		{1.03, 2.03, 3.03, 4.03, 5.03, 6.03, 7.03, 8.03},
		{1.04, 2.04, 3.04, 4.04, 5.04, 6.04, 7.04, 8.04},
		{1.05, 2.05, 3.05, 4.05, 5.05, 6.05, 7.05, 8.05},
		{1.06, 2.06, 3.06, 4.06, 5.06, 6.06, 7.06, 8.06},
		{1.07, 2.07, 3.07, 4.07, 5.07, 6.07, 7.07, 8.07},
		{1.08, 2.08, 3.08, 4.08, 5.08, 6.08, 7.08, 8.08},
	}
	corInvF := [][]float64{
		{1.010349288486416e+00, -1.001293661060802e+00, -1.293661060801929e-03, -1.293661060802808e-03, -1.293661060802478e-03, -1.293661060803688e-03, -1.293661060802369e-03, -1.293661060802588e-03},
		{1.034928848641657e-02, 9.987063389391978e-01, -1.001293661060802e+00, -1.293661060801433e-03, -1.293661060802162e-03, -1.293661060801489e-03, -1.293661060802498e-03, -1.293661060801994e-03},
		{1.034928848641659e-02, -1.293661060801784e-03, 9.987063389391978e-01, -1.001293661060802e+00, -1.293661060802045e-03, -1.293661060801933e-03, -1.293661060801859e-03, -1.293661060802641e-03},
		{1.034928848641647e-02, -1.293661060802575e-03, -1.293661060802366e-03, 9.987063389391977e-01, -1.001293661060803e+00, -1.293661060802533e-03, -1.293661060802198e-03, -1.293661060800355e-03},
		{1.034928848641662e-02, -1.293661060801809e-03, -1.293661060801898e-03, -1.293661060802523e-03, 9.987063389391981e-01, -1.001293661060801e+00, -1.293661060802188e-03, -1.293661060803104e-03},
		{1.034928848641657e-02, -1.293661060802236e-03, -1.293661060802074e-03, -1.293661060801422e-03, -1.293661060801864e-03, 9.987063389391969e-01, -1.001293661060802e+00, -1.293661060801771e-03},
		{1.034928848641658e-02, -1.293661060801843e-03, -1.293661060802011e-03, -1.293661060802346e-03, -1.293661060802058e-03, -1.293661060801772e-03, 9.987063389391979e-01, -1.001293661060802e+00},
		{-3.751617076326007e-02, -1.203104786545926e-01, -1.203104786545925e-01, -1.203104786545925e-01, -1.203104786545925e-01, -1.203104786545925e-01, -1.203104786545924e-01, 8.796895213454076e-01 + noise},
	}
	if false {
		RunInvCheck(tst, "F", F, corInvF, checkI, 1e-15, 1e-15) // lapack fails with this one
	}
}

func Test_matinv02(tst *testing.T) {

	//verbose()
	chk.PrintTitle("matinv02")

	io.Pf("\n--- K --(6 x 6)-----------------------------------\n")
	K := [][]float64{
		{3.46540497998689445e-05, -1.39368151175265866e-05, -1.39368151175265866e-05, 0.00000000000000000e+00, 7.15957288480514429e-23, -2.93617909908697186e+02},
		{-1.39368151175265866e-05, 3.46540497998689445e-05, -1.39368151175265866e-05, 0.00000000000000000e+00, 7.15957288480514429e-23, -2.93617909908697186e+02},
		{-1.39368151175265866e-05, -1.39368151175265866e-05, 3.46540497998689445e-05, 0.00000000000000000e+00, 7.15957288480514429e-23, -2.93617909908697186e+02},
		{0.00000000000000000e+00, 0.00000000000000000e+00, 0.00000000000000000e+00, 4.85908649173955311e-05, 0.00000000000000000e+00, 0.00000000000000000e+00},
		{3.13760264822604860e-18, 3.13760264822604860e-18, 3.13760264822604860e-18, 0.00000000000000000e+00, 1.00000000000000000e+00, -1.93012141894243434e+07},
		{0.00000000000000000e+00, 0.00000000000000000e+00, 0.00000000000000000e+00, -0.00000000000000000e+00, 0.00000000000000000e+00, 1.00000000000000000e+00},
	}
	Kcor := [][]float64{
		{6.28811662297464645e+04, 4.23011662297464645e+04, 4.23011662297464645e+04, 0.00000000000000000e+00, -1.05591885817167332e-17, 4.33037966311565489e+07},
		{4.23011662297464645e+04, 6.28811662297464645e+04, 4.23011662297464645e+04, 0.00000000000000000e+00, -1.05591885817167332e-17, 4.33037966311565489e+07},
		{4.23011662297464645e+04, 4.23011662297464645e+04, 6.28811662297464645e+04, 0.00000000000000000e+00, -1.05591885817167348e-17, 4.33037966311565489e+07},
		{0.00000000000000000e+00, 0.00000000000000000e+00, 0.00000000000000000e+00, 2.05800000000000000e+04, 0.00000000000000000e+00, 0.00000000000000000e+00},
		{-4.62744616057000471e-13, -4.62744616057000471e-13, -4.62744616057000471e-13, 0.00000000000000000e+00, 1.00000000000000000e+00, 1.93012141894243434e+07},
		{0.00000000000000000e+00, 0.00000000000000000e+00, 0.00000000000000000e+00, 0.00000000000000000e+00, 0.00000000000000000e+00, 1.00000000000000000e+00},
	}

	checkI := true
	RunInvCheck(tst, "K", K, Kcor, checkI, 1e-8, 1e-12)

	io.Pf("\n--- A --(4 x 3)-----------------------------------\n")
	A := [][]float64{
		{-5.773502691896260e-01, -5.773502691896260e-01, 1.000000000000000e+00},
		{5.773502691896260e-01, -5.773502691896260e-01, 1.000000000000000e+00},
		{-5.773502691896260e-01, 5.773502691896260e-01, 1.000000000000000e+00},
		{5.773502691896260e-01, 5.773502691896260e-01, 1.000000000000000e+00},
	}
	corInvA := [][]float64{
		{-4.330127018922192e-01, 4.330127018922192e-01, -4.330127018922192e-01, 4.330127018922192e-01},
		{-4.330127018922192e-01, -4.330127018922192e-01, 4.330127018922192e-01, 4.330127018922192e-01},
		{2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01, 2.500000000000000e-01},
	}
	corUA := [][]float64{
		{-0.5, -0.5, -0.5, 0.5},
		{-0.5, 0.5, -0.5, -0.5},
		{-0.5, -0.5, 0.5, -0.5},
		{-0.5, 0.5, 0.5, 0.5},
	}
	corSA := []float64{2, 1.15470053837925191e+00, 1.15470053837925191e+00}
	corVtA := [][]float64{
		{0, 0, -1},
		{1, 0, 0},
		{0, 1, 0},
	}
	checkI = false
	RunInvCheck(tst, "A", A, corInvA, checkI, 1e-15, 1e-15)
	RunSvdCheck(tst, "A", A, corUA, corSA, corVtA, 1e-15)

	io.Pf("\n--- E --(4 x 5)-----------------------------------\n")
	E := [][]float64{
		{1, 0, 0, 0, 2},
		{0, 0, 3, 0, 0},
		{0, 0, 0, 0, 0},
		{0, 4, 0, 0, 0},
	}
	corInvE := [][]float64{
		{0.2, 0.0, 0.0, 0.0},
		{0.0, 0.0, 0.0, 1.0 / 4.0},
		{0.0, 1.0 / 3.0, 0.0, 0.0},
		{0.0, 0.0, 0.0, 0.0},
		{0.4, 0.0, 0.0, 0.0},
	}
	corUE := [][]float64{
		{0, 0, 1, 0},
		{0, 1, 0, 0},
		{0, 0, 0, -1},
		{1, 0, 0, 0},
	}
	corSE := []float64{4, 3, math.Sqrt(5.0), 0}
	corVtE := [][]float64{
		{0, 1, 0, 0, 0},
		{0, 0, 1, 0, 0},
		{math.Sqrt(0.2), 0, 0, 0, math.Sqrt(0.8)},
		{0, 0, 0, 1, 0},
		{-math.Sqrt(0.8), 0, 0, 0, math.Sqrt(0.2)},
	}
	RunInvCheck(tst, "E", E, corInvE, false, 1e-15, 1e-15)
	RunSvdCheck(tst, "E", E, corUE, corSE, corVtE, 1e-15)

	io.Pf("\n--- D --(5 x 6)-----------------------------------\n")
	D := [][]float64{
		{12, 28, 22, 20, 8, 1},
		{0, 3, 5, 17, 28, 1},
		{56, 0, 23, 1, 0, 1},
		{12, 29, 27, 10, 1, 1},
		{9, 4, 13, 8, 22, 1},
	}
	corInvD := [][]float64{
		{5.6387724512344639e-01, -6.0176177188969326e-01, -7.6500652148749224e-02, -5.6389938864086908e-01, 5.8595836573334192e-01},
		{1.2836912791395787e+00, -1.4064756360496755e+00, -2.2890726327210095e-01, -1.2518220058421685e+00, 1.3789338004227019e+00},
		{-1.2866745075158739e+00, 1.3659857664770796e+00, 2.1392850711928030e-01, 1.2865799982753852e+00, -1.3277457214130808e+00},
		{-8.8185982449865485e-01, 1.0660542211012198e+00, 1.7123094548599221e-01, 8.9119882164767850e-01, -1.0756926383722674e+00},
		{6.6698814093525072e-01, -7.4815557352521045e-01, -1.2451059750508876e-01, -6.7584431870600359e-01, 7.8530451101142418e-01},
		{-1.1017522295492406e+00, 1.2149323757487696e+00, 1.9244991110051662e-01, 1.0958269819071325e+00, -1.1998242501940171e+00},
	}
	RunInvCheck(tst, "D", D, corInvD, false, 1e-12, 1e-12)

	io.Pf("\n--- M --(8 x 6)-----------------------------------\n")

	N := [][]float64{
		{64, 2, 3, 61, 60, 6},
		{9, 55, 54, 12, 13, 51},
		{17, 47, 46, 20, 21, 43},
		{40, 26, 27, 37, 36, 30},
		{32, 34, 35, 29, 28, 38},
		{41, 23, 22, 44, 45, 19},
		{49, 15, 14, 52, 53, 11},
		{8, 58, 59, 5, 4, 62},
	}
	corUN := [][]float64{
		{-3.55440050103892013e-01, 5.58524230302752001e-01, 3.21527170879115143e-01, 6.37543626540910791e-01, 1.20986138420114242e-01, -1.80318785928732600e-01, 6.75629042980422229e-02, -1.24177817901340321e-02},
		{-3.51677570954328833e-01, -4.04746527894022212e-01, -3.33635516776797258e-01, 6.73740086557286094e-02, 3.77544291299632351e-01, -6.11147593873444528e-01, 9.11984531680994359e-02, -2.68873553734161774e-01},
		{-3.51697791784134572e-01, -2.50676249766225601e-01, -3.42113299403476012e-01, 3.06040327435065040e-01, 2.62449443778547065e-01, 5.27905343076819689e-01, -5.96199251026486698e-03, 5.05142140658046968e-01},
		{-3.55379387614474740e-01, 9.63133959193619715e-02, 3.46960518759155012e-01, -5.17886573729448463e-01, 2.15760449001137916e-01, -2.40744628905471270e-01, -3.69921913109349521e-01, 4.84239967681215244e-01},
		{-3.55359166784668945e-01, -5.77568822084346956e-02, 3.55438301385835431e-01, -2.88714533999480660e-01, 3.13208099296680087e-01, 4.76901710543422896e-01, 2.57485462004471033e-01, -5.18515398784977322e-01},
		{-3.51758454273551902e-01, 2.11534584617164317e-01, -3.67546647283516603e-01, -3.59158641487645203e-02, -2.87950168776955284e-01, 1.49611711567205735e-01, -6.66435232137126632e-01, -3.81711592122386145e-01},
		{-3.51778675103357641e-01, 3.65604862744960957e-01, -3.76024429910196467e-01, -3.37498471942029310e-01, -3.52043566301223687e-01, -6.63694607705796885e-02, 5.81198771479292331e-01, 1.45443005198501424e-01},
		{-3.55298504295251727e-01, -5.19967716591824725e-01, 3.80871649265874468e-01, 1.69057481188018582e-01, -6.49954686717932661e-01, -5.58382957092198665e-02, 4.48735468068362162e-02, 4.66932128938957747e-02},
	}
	corSN := []float64{2.25169577993700130e+02, 1.27186528905283367e+02, 1.17578914421132179e+01, 1.81235447053960281e-14, 9.59676789459164647e-15, 5.90626950718289933e-15}
	corVtN := [][]float64{
		{-4.08494047936939497e-01, -4.08045603264143408e-01, -4.08110286143654521e-01, -4.08299999298406213e-01, -4.08235316418895322e-01, -4.08304334782187583e-01},
		{4.10998447000698430e-01, -4.10374743598731273e-01, -4.09152944725395873e-01, 4.07333050380690675e-01, 4.06111251507354831e-01, -4.05487548105387952e-01},
		{5.58255126979596561e-01, -3.98347962292792124e-01, -1.58158847810171505e-01, -1.62312216468269321e-01, -4.02501330950890079e-01, 5.62408495637693240e-01},
		{2.42823332913068013e-01, 1.76609882546059610e-01, -1.69687233730444087e-01, -7.73915502659370369e-01, 5.31092169746302023e-01, -6.92264881561544670e-03},
		{-1.90375789863952510e-01, -6.81793644230750617e-01, 6.11842650664831345e-01, -1.30143465472696007e-01, 3.20519255336648601e-01, 6.99509935659193283e-02},
		{5.07304632534305910e-01, 1.01865757170289922e-01, 4.87729899188048321e-01, -1.58565803891923096e-01, -3.48738828642383147e-01, -5.89595656358337772e-01},
	}
	RunSvdCheck(tst, "N", N, corUN, corSN, corVtN, 1e-13)
}

func Test_cond01(tst *testing.T) {

	//verbose()
	chk.PrintTitle("cond01. condition number of matrix using general inverse")

	a := [][]float64{
		{1, 2},
		{2, 3.999},
	}
	cIa, err := MatCondG(a, "I", 1e-10)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	ai := MatAlloc(2, 2)
	_, err = MatInv(ai, a, 1e-10)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	nIa := MatNormI(a)
	nIai := MatNormI(ai)
	PrintMat("a", a, "%10g", false)
	PrintMat("ai", ai, "%20g", false)
	io.Pforan("normI(a)  = %v\n", nIa)
	io.Pforan("normI(ai) = %v\n", nIai)
	io.Pforan("cond(a,I) = %v\n", cIa)
	chk.Matrix(tst, "ai       ", 1e-9, ai, [][]float64{{-3999, 2000}, {2000, -1000}})
	chk.Scalar(tst, "normI(a) ", 1e-15, nIa, 5.999)
	chk.Scalar(tst, "normI(ai)", 1e-9, nIai, 5999)
	chk.Scalar(tst, "condI(a) ", 1e-8, cIa, 35988.001)

	b := [][]float64{
		{1, 2},
		{2, 3},
	}
	bi := MatAlloc(2, 2)
	_, err = MatInv(bi, b, 1e-10)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	cIb, err := MatCondG(b, "I", 1e-10)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	cIbi, err := MatCondG(bi, "I", 1e-10)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	cFb, err := MatCondG(b, "F", 1e-10)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	cFbi, err := MatCondG(bi, "F", 1e-10)
	if err != nil {
		chk.Panic("%v", err.Error())
	}
	PrintMat("\nb", b, "%10g", false)
	io.Pforan("cond(b, I) = %v\n", cIb)
	io.Pforan("cond(bi,I) = %v\n", cIbi)
	io.Pforan("cond(b, F) = %v\n", cFb)
	io.Pforan("cond(bi,F) = %v\n", cFbi)
	chk.Matrix(tst, "bi       ", 1e-17, bi, [][]float64{{-3, 2}, {2, -1}})
	chk.Scalar(tst, "condI(b) ", 1e-17, cIb, 25.0)
	chk.Scalar(tst, "condF(b) ", 1e-14, cFb, 18.0)
}
